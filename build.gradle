
buildscript {
	repositories {
		maven { url "https://repo.spring.io/plugins-release" }
	}
	
	dependencies {
		classpath("io.spring.gradle:dependency-management-plugin:1.0.0.RELEASE")
	}
}

plugins {
    id "java"
    id "application"
    id "org.springframework.boot" version "1.5.4.RELEASE"
}

configure(allprojects) { project ->
	group = "com.athene"
	version = qualifyVersionIfNecessary(version)
	
	ext.args4jVersion			= "2.33"
	ext.aspectjweaverVersion	= "1.8.10"
	ext.commonsBeanutilsVersion	= "1.9.3"
	ext.druidVersion			= "1.0.28"
	ext.fastjsonVersion			= "1.2.32"
	ext.guavaVersion			= "21.0"
	ext.hamcrestVersion			= "1.3"
	ext.hibernateVersion		= "5.2.8.Final"
	ext.hibernateToolsVersion	= "5.2.1.Final"
	ext.iceVersion				= "3.6.3"
	ext.jedisVersion			= "2.9.0"
	ext.junitVersion           	= "4.12"
	ext.logbackVersion			= "1.2.1"
	ext.mssqlJdbcVersion		= "6.1.7.jre8-preview"
	ext.mysqlVersion			= "6.0.5"
	ext.slf4jVersion           	= "1.7.22"
	ext.snifferVersion         	= "1.15"
	ext.springVersion			= "4.3.9.RELEASE"
	ext.springDataVersion		= "Ingalls-RELEASE"
	ext.springBootVersion		= "1.5.4.RELEASE"
	
	ext.gradleScriptDir = "${rootProject.projectDir}/gradle"

	apply plugin: "java"

	configurations {
		sniffer
		javaApiSignature
	}

	configurations.all {
		// check for updates every build
		resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
	}

	compileJava.options*.compilerArgs = [
		"-Xlint:serial", "-Xlint:varargs", "-Xlint:cast", "-Xlint:classfile",
		"-Xlint:dep-ann", "-Xlint:divzero", "-Xlint:empty", "-Xlint:finally",
		"-Xlint:overrides", "-Xlint:path", "-Xlint:processing", "-Xlint:static",
		"-Xlint:try", "-Xlint:fallthrough", "-Xlint:rawtypes", "-Xlint:deprecation",
		"-Xlint:unchecked", "-Xlint:-options", "-Werror"
	]

	compileTestJava.options*.compilerArgs = [
		"-Xlint:serial", "-Xlint:-varargs", "-Xlint:cast", "-Xlint:classfile",
		"-Xlint:dep-ann", "-Xlint:divzero", "-Xlint:empty", "-Xlint:finally",
		"-Xlint:overrides", "-Xlint:path", "-Xlint:processing", "-Xlint:static",
		"-Xlint:try", "-Xlint:-fallthrough", "-Xlint:-rawtypes", "-Xlint:-deprecation",
		"-Xlint:-unchecked", "-Xlint:-options"]

	compileJava {
		sourceCompatibility = 1.8
		targetCompatibility = 1.8
		options.encoding = 'UTF-8'
	}

	compileTestJava {
		sourceCompatibility = 1.8
		targetCompatibility = 1.8
		options.encoding = 'UTF-8'
		options.compilerArgs += "-parameters"
	}
	
	repositories {
		mavenLocal()
		maven { url "https://repo.spring.io/plugins-release" }
	}
}

configure(subprojects) { subprojects ->
	
	apply plugin: "io.spring.dependency-management"
	

	dependencyManagement {
		imports {
			mavenBom "org.springframework.data:spring-data-releasetrain:${springDataVersion}"
			mavenBom "org.springframework:spring-framework-bom:${springVersion}"
		}
		dependencies {
			dependency("args4j:args4j:${args4jVersion}")
			dependency("org.aspectj:aspectjweaver:${aspectjweaverVersion}")
			dependency("commons-beanutils:commons-beanutils:${commonsBeanutilsVersion}") {
				exclude 'commons-logging:commons-logging'
			}
			dependency("com.alibaba:druid:${druidVersion}")
			dependency("com.alibaba:fastjson:${fastjsonVersion}")
			dependency("com.google.guava:guava:${guavaVersion}")
			dependency("org.hibernate:hibernate-core:${hibernateVersion}")
			dependency("org.hibernate:hibernate-entitymanager:${hibernateVersion}")
			dependency("org.hibernate:hibernate-tools:${hibernateToolsVersion}")
			dependency("org.slf4j:slf4j-api:${slf4jVersion}")
			dependency("com.microsoft.sqlserver:mssql-jdbc:${mssqlJdbcVersion}")
			dependency("mysql:mysql-connector-java:${mysqlVersion}")
			dependency("ch.qos.logback:logback-classic:${logbackVersion}")
			dependency("org.springframework:spring-core:${springVersion}") {
				exclude 'commons-logging:commons-logging'
			}
			dependency("org.springframework.boot:spring-boot-starter-web:${springBootVersion}")
			
			dependency("org.hamcrest:hamcrest-core:${hamcrestVersion}")
			dependency("org.hamcrest:hamcrest-library:${hamcrestVersion}")
			dependency("com.zeroc:ice:${iceVersion}")
			dependency("com.zeroc:icebox:${iceVersion}")
			dependency("redis.clients:jedis:${jedisVersion}")
			dependency("junit:junit:${junitVersion}")
			dependency("org.springframework:spring-test:${springVersion}")
		}
		resolutionStrategy {
			cacheChangingModulesFor 0, "seconds"
		}
		applyMavenExclusions = true
	}
	
	dependencies {
		compile("commons-beanutils:commons-beanutils")
		compile("com.google.guava:guava")
		compile("ch.qos.logback:logback-classic")
		compile("org.slf4j:slf4j-api")
		
		testCompile("org.hamcrest:hamcrest-library")
		testCompile("junit:junit")
		testCompile("org.springframework:spring-test")
	}
}

project("athene-data-domain") {
	dependencies {
		compile("org.hibernate:hibernate-core")
		compile("org.springframework.data:spring-data-commons")
	}
}

project("athene-data") {
	dependencies {
		compile(project(":athene-data-domain"))
		
		compile("com.alibaba:druid")
		compile("org.aspectj:aspectjweaver")
		compile("org.hibernate:hibernate-entitymanager")
		compile("redis.clients:jedis")
		compile("mysql:mysql-connector-java")
		compile("org.springframework.data:spring-data-jpa")
		compile("org.springframework.data:spring-data-redis")
	}
}

project("athene-core") {
	dependencies {
		compile(project(":athene-core-api"))
		compile ("args4j:args4j")
		compile ("com.zeroc:icebox")
	}
}

project("athene-core-api") {
	dependencies {
		compile("com.zeroc:ice")
		compile("org.springframework:spring-context")
		compile("org.springframework:spring-core")
	}
}

project("athene-logger") {
	dependencies {
		compile ("com.zeroc:ice:3.6.3")
	}
}

project("athene-data-tools") {
	dependencies {
		compile(project(":athene-data-domain"))
		compile("org.hibernate:hibernate-tools")
		compile("org.springframework.data:spring-data-jpa")
		compile("mysql:mysql-connector-java")
	}
}

project("athene-admin-api") {
	
	dependencies {
		compile(project(":athene-data-domain"))
		compile("com.zeroc:ice")
		compile("org.springframework:spring-context")
		compile("org.springframework:spring-tx")
	}
}

project("athene-admin-provider") {
	dependencies {
		compile(project(":athene-data"))
		compile(project(":athene-admin-api"))
	}
}

project("sybxjr") {

	apply plugin: "java"
	apply plugin: "application"
	
	mainClassName = "com.athene.sybxjr.Application"
	jar {
		manifest {
	        attributes("Implementation-Title": "zhaochf",
	                   "Implementation-Version": version)
	    }
		excludes = ["**/*.properties", "**/*.xml"]
	}
	
	distributions {
	    main {
	        contents {
	            from("config") {
	                into "config"
	            }
	        }
	    }
	}
	
	dependencies {
		compile("com.alibaba:fastjson")
		compile(project(":athene-data"))
		compile("org.springframework.boot:spring-boot-starter-web")
		compile("com.microsoft.sqlserver:mssql-jdbc")
		compile("com.oracle:ojdbc14:10.2.0.4.0")
	}
}

def qualifyVersionIfNecessary(version) {
	if (rootProject.hasProperty("BRANCH_NAME")) {
		def qualifier = rootProject.getProperty("BRANCH_NAME")
		if (qualifier.startsWith("SPR-")) {
			return version.replace('BUILD', qualifier)
		}
	}
	return version
}

repositories {
    mavenLocal()
    maven { url "https://repo.spring.io/plugins-release" }
}
